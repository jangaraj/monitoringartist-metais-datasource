{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","utils","migrations","GenericDatasourceQueryCtrl","$scope","$injector","$rootScope","$sce","$q","templateSrv","replaceTemplateVars","datasource","$on","onVariableChange","onTargetBlur","init","target","migrate","scopeDefaults","metric","oldTarget","_","cloneDeep","queryOptionsText","renderQueryOptionsText","defaults","targetDefaults","mode","application","filter","item","functions","map","func","metricFunctions","createFuncInstance","def","params","downsampleFunctionList","name","value","initFilters","metricFindQuery","then","uiSegmentSrv","transformToSegments","rawQuery","panelCtrl","refresh","str","isTemplateVariable","variables","isRegex","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;AAEIC,W;;AACAC,gB;;;;;;;;;;;;;;;;;;;;;4CAECC,0B;;;AAEX;AACA,4CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,IAA3C,EAAiDC,EAAjD,EAAqDC,WAArD,EAAkE;AAAA;;AAAA,8JAC1DL,MAD0D,EAClDC,SADkD;;AAGhE;AACA;AACA;AACA,gBAAKG,EAAL,GAAUA,EAAV;AACA,gBAAKE,mBAAL,GAA2B,MAAKC,UAAL,CAAgBD,mBAA3C;AACA,gBAAKD,WAAL,GAAmBA,WAAnB;;AAEA;AACAH,qBAAWM,GAAX,CAAe,iCAAf,EAAkD;AAAA,mBAAM,MAAKC,gBAAL,EAAN;AAAA,WAAlD;;AAEA;AACAT,iBAAOQ,GAAP,CAAW,mBAAX,EAAgC,YAAM;AACpC,kBAAKE,YAAL;AACD,WAFD;;AAIA,gBAAKC,IAAL,GAAY,YAAW;AACrB,gBAAIC,SAAS,KAAKA,MAAlB;;AAEA;AACAA,qBAASd,WAAWe,OAAX,CAAmBD,MAAnB,CAAT;;AAEA,gBAAIE,gBAAgB;AAClBC,sBAAQ,EADU;AAElBC,yBAAWC,EAAEC,SAAF,CAAY,KAAKN,MAAjB,CAFO;AAGlBO,gCAAkB,KAAKC,sBAAL;AAHA,aAApB;AAKAH,cAAEI,QAAF,CAAW,IAAX,EAAiBP,aAAjB;;AAEA;AACA,gBAAIQ,iBAAiB;AACnBC,oBAAM,CADa;AAEnBC,2BAAa,EAAEC,QAAQ,EAAV,EAFM;AAGnBC,oBAAM,EAAED,QAAQ,EAAV,EAHa;AAInBE,yBAAW;AAJQ,aAArB;AAMAV,cAAEI,QAAF,CAAWT,MAAX,EAAmBU,cAAnB;;AAEA;AACAV,mBAAOe,SAAP,GAAmBV,EAAEW,GAAF,CAAMhB,OAAOe,SAAb,EAAwB,UAASE,IAAT,EAAe;AACxD,qBAAOC,gBAAgBC,kBAAhB,CAAmCF,KAAKG,GAAxC,EAA6CH,KAAKI,MAAlD,CAAP;AACD,aAFkB,CAAnB;;AAIA,gBAAI,MAAM,CAAV,EAAa;AACX,mBAAKC,sBAAL,GAA8B,CAC5B,EAACC,MAAM,KAAP,EAAcC,OAAO,KAArB,EAD4B,EAE5B,EAACD,MAAM,KAAP,EAAcC,OAAO,KAArB,EAF4B,EAG5B,EAACD,MAAM,KAAP,EAAcC,OAAO,KAArB,EAH4B,CAA9B;;AAMA,mBAAKC,WAAL;AACD;AACF,WApCD;;AAsCA,gBAAK1B,IAAL;;AAxDgE;AA2DjE;;;;yCAEc;AACb,mBAAO,KAAKJ,UAAL,CAAgB+B,eAAhB,CAAgC,KAAK1B,MAArC,EACJ2B,IADI,CACC,KAAKC,YAAL,CAAkBC,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;6CAEkB;AACjB,iBAAK7B,MAAL,CAAY8B,QAAZ,GAAuB,CAAC,KAAK9B,MAAL,CAAY8B,QAApC;AACD;;;6CAEkB;AACjB,iBAAKC,SAAL,CAAeC,OAAf,GADiB,CACS;AAC3B;;;qCAEUC,G,EAAK;AACd,mBAAOhD,MAAMiD,kBAAN,CAAyBD,GAAzB,EAA8B,KAAKxC,WAAL,CAAiB0C,SAA/C,CAAP;AACD;;;kCAEOF,G,EAAK;AACX,mBAAOhD,MAAMmD,OAAN,CAAcH,GAAd,CAAP;AACD;;;;QApF6CjD,S;;;;AAwFhDG,iCAA2BkD,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nimport * as utils from './utils';\nimport * as migrations from './migrations';\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  //constructor($scope, $injector, uiSegmentSrv)  {\n  constructor($scope, $injector, $rootScope, $sce, $q, templateSrv) {\n    super($scope, $injector);\n\n    //this.scope = $scope;\n    //this.uiSegmentSrv = uiSegmentSrv;\n    //this.target.target = this.target.target || 'select metric';\n    this.$q = $q;\n    this.replaceTemplateVars = this.datasource.replaceTemplateVars;\n    this.templateSrv = templateSrv;\n\n    // Update metric suggestion when template variable was changed\n    $rootScope.$on('template-variable-value-updated', () => this.onVariableChange());\n\n    // Update metrics when item selected from dropdown\n    $scope.$on('typeahead-updated', () => {\n      this.onTargetBlur();\n    });\n\n    this.init = function() {\n      var target = this.target;\n\n      // Migrate old targets\n      target = migrations.migrate(target);\n\n      var scopeDefaults = {\n        metric: {},\n        oldTarget: _.cloneDeep(this.target),\n        queryOptionsText: this.renderQueryOptionsText()\n      };\n      _.defaults(this, scopeDefaults);\n\n      // Load default values\n      var targetDefaults = {\n        mode: 0,\n        application: { filter: \"\" },\n        item: { filter: \"\" },\n        functions: [],\n      };\n      _.defaults(target, targetDefaults);\n\n      // Create function instances from saved JSON\n      target.functions = _.map(target.functions, function(func) {\n        return metricFunctions.createFuncInstance(func.def, func.params);\n      });\n\n      if (0 === 0) {\n        this.downsampleFunctionList = [\n          {name: \"avg\", value: \"avg\"},\n          {name: \"min\", value: \"min\"},\n          {name: \"max\", value: \"max\"}\n        ];\n\n        this.initFilters();\n      }\n    };\n\n    this.init();\n\n\n  }\n\n  getItemNames() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  isVariable(str) {\n    return utils.isTemplateVariable(str, this.templateSrv.variables);\n  }\n\n  isRegex(str) {\n    return utils.isRegex(str);\n  }\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}