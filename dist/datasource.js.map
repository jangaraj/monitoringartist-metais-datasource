{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","timeFrom","range","from","_d","toISOString","slice","timeTo","to","promises","map","target","cloneDeep","method","datasourceRequest","then","result","datapoints","each","item","push","parseInt","format","all","flatten","timeseries_data","timeseries","response","status","message","title","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","headers","mapToTextValue","i","text","attributes","find","x","value","uuid","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from 'moment';\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    var timeFrom = query.range.from._d.toISOString().slice(0,10);\n    var timeTo = query.range.to._d.toISOString().slice(0,10);\n\n    var promises = _.map(options.targets, target => {\n      target = _.cloneDeep(target);\n      var options = {\n       url: this.url + '/monitoring/param-value/list?entityRef=' + target['target'] + '&parameterTypeId=18&intervalStart=' + timeFrom + '&intervalEnd=' + timeTo + '&sortAttr=intervalStart&sortAsc=true&perPageSize=100000',\n        data: query,\n        method: 'GET',\n      };\n      return this.backendSrv.datasourceRequest(options).then(function(result) {\n        var datapoints = []\n        _.each(result.data['results'], function(item) {\n          datapoints.push([parseInt(item[\"value\"]), parseInt(moment(item[\"monitoredInterval\"][\"end\"]).format('x'))])\n        });\n        return [{\"target\":target['target'],\"datapoints\":datapoints}];\n      });\n\n    });\n\n    // Data for panel (all targets)\n    return this.q.all(_.flatten(promises))\n      .then(_.flatten)\n      .then(timeseries_data => {\n\n        var data = _.map(timeseries_data, timeseries => {\n          return timeseries;\n        });\n        return { data: data };\n      });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  // Optional\n  // Required for templating\n  metricFindQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/cmdb/read/cilistfiltered',\n      data: '{\"page\":1,\"perPage\":9999,\"sortBy\":\"createdAt\",\"sortType\":\"DESC\",\"filter\":{\"type\":[\"AS\"],\"metaAttributes\":{\"state\":[\"DRAFT\"]},\"relTypeFilters\":[{\"relType\":\"ISVS_realizuje_AS\",\"relCiUuids\":[\"56fb4575-7034-41c8-bf51-c4c97c50bcf4\"]}],\"searchFields\":[\"Gen_Profil_nazov\",\"Gen_Profil_kod_metais\"],\"fullTextSearch\":\"' + options.target + '\"}}',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data[\"configurationItemSet\"], (i) => {\n      return { text: i.attributes.find( x => x.name === 'Gen_Profil_nazov').value, value: i.uuid};\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        refId: target.refId,\n        hide: target.hide\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}