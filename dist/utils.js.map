{"version":3,"sources":["../src/utils.js"],"names":["expandItemName","name","key","key_params","substring","indexOf","lastIndexOf","split","i","length","replace","isRegex","str","regexPattern","test","isTemplateVariable","templateVariables","variablePattern","variables","_","map","variable","includes","buildRegex","matches","match","pattern","flags","undefined","RegExp","escapeRegex","value","parseInterval","interval","intervalPattern","momentInterval","exec","moment","duration","Number","valueOf","formatAcknowledges","acknowledges","formatted_acknowledges","each","ack","timestamp","unix","clock","format","alias","surname","message","concat","convertToZabbixAPIUrl","url","zabbixAPIUrlPattern","trimSlashPattern","contains"],"mappings":"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","file":"utils.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\n\n/**\n * Expand Zabbix item name\n *\n * @param  {string} name item name, ie \"CPU $2 time\"\n * @param  {string} key  item key, ie system.cpu.util[,system,avg1]\n * @return {string}      expanded name, ie \"CPU system time\"\n */\nexport function expandItemName(name, key) {\n\n  // extract params from key:\n  // \"system.cpu.util[,system,avg1]\" --> [\"\", \"system\", \"avg1\"]\n  var key_params = key.substring(key.indexOf('[') + 1, key.lastIndexOf(']')).split(',');\n\n  // replace item parameters\n  for (var i = key_params.length; i >= 1; i--) {\n    name = name.replace('$' + i, key_params[i - 1]);\n  }\n  return name;\n}\n\n// Pattern for testing regex\nexport var regexPattern = /^\\/(.*)\\/([gmi]*)$/m;\n\nexport function isRegex(str) {\n  return regexPattern.test(str);\n}\n\nexport function isTemplateVariable(str, templateVariables) {\n  var variablePattern = /^\\$\\w+/;\n  if (variablePattern.test(str)) {\n    var variables = _.map(templateVariables, variable => {\n      return '$' + variable.name;\n    });\n    return _.includes(variables, str);\n  } else {\n    return false;\n  }\n}\n\nexport function buildRegex(str) {\n  var matches = str.match(regexPattern);\n  var pattern = matches[1];\n  var flags = matches[2] !== \"\" ? matches[2] : undefined;\n  return new RegExp(pattern, flags);\n}\n\n// Need for template variables replace\n// From Grafana's templateSrv.js\nexport function escapeRegex(value) {\n  return value.replace(/[\\\\^$*+?.()|[\\]{}\\/]/g, '\\\\$&');\n}\n\nexport function parseInterval(interval) {\n  var intervalPattern = /(^[\\d]+)(y|M|w|d|h|m|s)/g;\n  var momentInterval = intervalPattern.exec(interval);\n  return moment.duration(Number(momentInterval[1]), momentInterval[2]).valueOf();\n}\n\n/**\n * Format acknowledges.\n *\n * @param  {array} acknowledges array of Zabbix acknowledge objects\n * @return {string} HTML-formatted table\n */\nexport function formatAcknowledges(acknowledges) {\n  if (acknowledges.length) {\n    var formatted_acknowledges = '<br><br>Acknowledges:<br><table><tr><td><b>Time</b></td>'\n      + '<td><b>User</b></td><td><b>Comments</b></td></tr>';\n    _.each(_.map(acknowledges, function (ack) {\n      var timestamp = moment.unix(ack.clock);\n      return '<tr><td><i>' + timestamp.format(\"DD MMM YYYY HH:mm:ss\") + '</i></td><td>' + ack.alias\n        + ' (' + ack.name + ' ' + ack.surname + ')' + '</td><td>' + ack.message + '</td></tr>';\n    }), function (ack) {\n      formatted_acknowledges = formatted_acknowledges.concat(ack);\n    });\n    formatted_acknowledges = formatted_acknowledges.concat('</table>');\n    return formatted_acknowledges;\n  } else {\n    return '';\n  }\n}\n\nexport function convertToZabbixAPIUrl(url) {\n  var zabbixAPIUrlPattern = /.*api_jsonrpc.php$/;\n  var trimSlashPattern = /(.*?)[\\/]*$/;\n  if (url.match(zabbixAPIUrlPattern)) {\n    return url;\n  } else {\n    return url.replace(trimSlashPattern, \"$1\");\n  }\n}\n\n// Fix for backward compatibility with lodash 2.4\nif (!_.includes) {\n  _.includes = _.contains;\n}\n\n"]}